# Defines the different values available for given Agreement terms. The terms are defined in agreement_terms scripts.
# The term values contain the main logic of Agreement terms, including the modifiers and effects.
# For Subject Agreements, the owner is the overlord and the target is the subject.

# Example:
#
# name_of_term_value = {
# 	term = name_of_term 					# References the term in agreement_terms that this value applies to
#
# 	owner_modifier = {						# A modifier that applies to the Agreement owner country. Can stack multiple times.
# 		my_owner_modifier = 1
# 	}
# 	target_modifier = {						# A modifier that applies to the Agreement target country. Can stack multiple times.
# 		my_target_modifier = 1
# 	}
# 	unique_owner_modifier = {				# A modifier that applies to the Agreement owner country. Only applies once.
# 		my_unique_owner_modifier = 1
# 	}
# 	unique_target_modifier = {				# A modifier that applies to the Agreement target country. Only applies once.
# 		my_unique_target_modifier = 1
# 	}
# 	loyalty_change = value					# How much the subject's loyalty will change when a new agreement with this term starts
# 	ai_acceptance = {
#		overlord = 1						# Willingness of AI overlord to accept this term
#		subject = 1							# Willingness of AI subject to accept this term
#	}
# 	triggered_loyalty_change = {			# How much the subject's loyalty will additionally change when a new agreement with this term starts, if "trigger" is true
# 		trigger = {
# 			agreement_scope_trigger
# 		}
# 		loyalty_change = value
#		ai_acceptance = {
#			overlord = 1
#			subject = 1
#		}
# 	}
# 	extra_term_text_subject = <LOC_KEY> 	# What should be shown in the "extra terms" panel for the subject if this term value is active (default is to not show it)
# 											# This loc key can use $SUBJECT$ and $OVERLORD$ to show the name of the relevant empire, and $MODIFIER$ to show the modifiers applying to the subject
# 	extra_term_text_overlord = <LOC_KEY>	# What should be shown in the "extra terms" panel for the overlord if this term value is active (default is to not show it)
# 											# Loc key can use $SUBJECT$ and $OVERLORD$ to show the name of the relevant empire, $MODIFIER$ for the overlord's modifiers, and $RESOURCES$ for the net resources it gains
# }
#
# name_of_resource_term_value = {
# 	term = name_of_resource_term
#	resource = <resource> (food/alloys/...)
# }

#######################
# SPECIALIST SUBJECTS #
#######################

specialist_katzprotektorat = {
	term = specialist_type
	triggered_loyalty_change = {
		trigger = {
			target = { is_militarist = yes }
		}
		loyalty_change = 5
		ai_acceptance = {
			subject = 25
		}
	}
	triggered_loyalty_change = {
		trigger = {
			target = { is_pacifist = yes }
		}
		loyalty_change = -20
		ai_acceptance = {
			subject = -100
		}
	}
	activate_effect = {
		convert_to_specialist = specialist_katzprotektorat
		target = {
			store_country_backup_data = {
				flag = yes
				name = yes
				government = yes
				room = yes
			}
			if = {
				limit = {
					is_gestalt = no
				}
				ruler = {
					save_global_event_target_as = pki_katzprotektorat_prev_leader@prev
					unassign_leader = this
				}
				change_government = {
					authority = auth_pki_katzeprotektorat
				}
				create_leader = {
					name = random
					species = event_target:pki_katzen_species
					class = governor
					skill = 3
					traits = {
						trait = katzen_trait_elite
					}
					leader_age_min = 30
					leader_age_max = 50
					effect = {
						save_global_event_target_as = pki_katzprotektorat_new_leader@prev
						prev = {
							assign_leader = prev
						}
					}
					background_planet = event_target:flusionhome
					background_job = bureaucrat
					background_ethic = ethic_militarist
				}
			}
			set_name = {
				key = "katzen_protektorat_name"
				variable_string = "[Capital.solar_system.GetName]"
			}
			change_country_flag = {
				icon = {
					category = "flusionian"
					file = "katzen_flag.dds"
				}
				background = {
					category = "backgrounds"
					file = "circle.dds"
				}
				colors = {
					"blue"
					"indigo"
					"null"
					"null"
				}
			}
		}
	}

	deactivate_effect = {
		target = {
			restore_country_backup_data = yes
			event_target:pki_katzprotektorat_new_leader@this = {
				kill_leader = {
					show_notification = no
				}
			}
			if = {
				limit = {
					exists = event_target:pki_katzprotektorat_prev_leader@this
				}
				assign_leader = event_target:pki_katzprotektorat_prev_leader@this
			}
		}
	}

	potential = {
		agreement_preset = preset_katzen
	}
}